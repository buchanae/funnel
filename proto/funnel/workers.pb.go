// Code generated by protoc-gen-go.
// source: workers.proto
// DO NOT EDIT!

package funnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WorkerResources struct {
	Cpus uint32 `protobuf:"varint,1,opt,name=cpus" json:"cpus,omitempty"`
	// In GB
	RamGb float64 `protobuf:"fixed64,2,opt,name=ram_gb,json=ramGb" json:"ram_gb,omitempty"`
	// In GB
	DiskGb      float64 `protobuf:"fixed64,3,opt,name=disk_gb,json=diskGb" json:"disk_gb,omitempty"`
	Preemptible bool    `protobuf:"varint,9,opt,name=preemptible" json:"preemptible,omitempty"`
	// TODO where does this get updated?
	ActivePorts []int32 `protobuf:"varint,10,rep,packed,name=active_ports,json=activePorts" json:"active_ports,omitempty"`
	Zone        string  `protobuf:"bytes,11,opt,name=zone" json:"zone,omitempty"`
}

func (m *WorkerResources) Reset()                    { *m = WorkerResources{} }
func (m *WorkerResources) String() string            { return proto.CompactTextString(m) }
func (*WorkerResources) ProtoMessage()               {}
func (*WorkerResources) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *WorkerResources) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *WorkerResources) GetRamGb() float64 {
	if m != nil {
		return m.RamGb
	}
	return 0
}

func (m *WorkerResources) GetDiskGb() float64 {
	if m != nil {
		return m.DiskGb
	}
	return 0
}

func (m *WorkerResources) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *WorkerResources) GetActivePorts() []int32 {
	if m != nil {
		return m.ActivePorts
	}
	return nil
}

func (m *WorkerResources) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type Worker struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Tasks assigned to this worker.
	// OUTPUT ONLY
	TaskIds   []string         `protobuf:"bytes,2,rep,name=task_ids,json=taskIds" json:"task_ids,omitempty"`
	Resources *WorkerResources `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	// Unix timestamp of the last time the worker called SyncWorker.
	// OUTPUT ONLY
	LastPing int64 `protobuf:"varint,7,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
	// Hostname of the worker host.
	Hostname string `protobuf:"bytes,13,opt,name=hostname" json:"hostname,omitempty"`
	// Version of the record in the database. Used to prevent write conflicts.
	// OUTPUT ONLY
	Version int64 `protobuf:"varint,14,opt,name=version" json:"version,omitempty"`
	// Signals the worker to shut down.
	// OUTPUT ONLY
	Shutdown bool `protobuf:"varint,15,opt,name=shutdown" json:"shutdown,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Worker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Worker) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

func (m *Worker) GetResources() *WorkerResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Worker) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

func (m *Worker) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Worker) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Worker) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

type ListWorkersRequest struct {
}

func (m *ListWorkersRequest) Reset()                    { *m = ListWorkersRequest{} }
func (m *ListWorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListWorkersRequest) ProtoMessage()               {}
func (*ListWorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ListWorkersResponse struct {
	Workers []*Worker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *ListWorkersResponse) Reset()                    { *m = ListWorkersResponse{} }
func (m *ListWorkersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListWorkersResponse) ProtoMessage()               {}
func (*ListWorkersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ListWorkersResponse) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type GetWorkerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetWorkerRequest) Reset()                    { *m = GetWorkerRequest{} }
func (m *GetWorkerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWorkerRequest) ProtoMessage()               {}
func (*GetWorkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetWorkerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*WorkerResources)(nil), "funnel.WorkerResources")
	proto.RegisterType((*Worker)(nil), "funnel.Worker")
	proto.RegisterType((*ListWorkersRequest)(nil), "funnel.ListWorkersRequest")
	proto.RegisterType((*ListWorkersResponse)(nil), "funnel.ListWorkersResponse")
	proto.RegisterType((*GetWorkerRequest)(nil), "funnel.GetWorkerRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkerService service

type WorkerServiceClient interface {
	SyncWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error)
}

type workerServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkerServiceClient(cc *grpc.ClientConn) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) SyncWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := grpc.Invoke(ctx, "/funnel.WorkerService/SyncWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := grpc.Invoke(ctx, "/funnel.WorkerService/ListWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := grpc.Invoke(ctx, "/funnel.WorkerService/GetWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerService service

type WorkerServiceServer interface {
	SyncWorker(context.Context, *Worker) (*Worker, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	GetWorker(context.Context, *GetWorkerRequest) (*Worker, error)
}

func RegisterWorkerServiceServer(s *grpc.Server, srv WorkerServiceServer) {
	s.RegisterService(&_WorkerService_serviceDesc, srv)
}

func _WorkerService_SyncWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SyncWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funnel.WorkerService/SyncWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SyncWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funnel.WorkerService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funnel.WorkerService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetWorker(ctx, req.(*GetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "funnel.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncWorker",
			Handler:    _WorkerService_SyncWorker_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _WorkerService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _WorkerService_GetWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workers.proto",
}

func init() { proto.RegisterFile("workers.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x14, 0xc4, 0x2d, 0xfd, 0xc8, 0x0b, 0xed, 0xa2, 0xc7, 0xc2, 0x9a, 0x2c, 0x42, 0x21, 0x27, 0x9f,
	0x1a, 0x51, 0xc4, 0x99, 0x63, 0x85, 0xc4, 0x61, 0xe5, 0x15, 0xe2, 0x58, 0x25, 0x8d, 0xe9, 0x5a,
	0x6d, 0xed, 0x60, 0xbb, 0x5d, 0x01, 0xe2, 0xc2, 0x5f, 0xe0, 0x7f, 0xf0, 0x67, 0x38, 0x71, 0xe7,
	0x57, 0x70, 0x42, 0x71, 0x9a, 0xb2, 0x9b, 0xee, 0xcd, 0x33, 0x6f, 0xde, 0x68, 0xe6, 0x45, 0x81,
	0xd1, 0xb5, 0x36, 0x2b, 0x61, 0xec, 0xa4, 0x34, 0xda, 0x69, 0xec, 0x7f, 0xdc, 0x2a, 0x25, 0xd6,
	0xd1, 0xb3, 0xa5, 0xd6, 0xcb, 0xb5, 0x48, 0xb3, 0x52, 0xa6, 0x99, 0x52, 0xda, 0x65, 0x4e, 0x6a,
	0xb5, 0x57, 0x25, 0x3f, 0x09, 0x9c, 0x7c, 0xf0, 0x7b, 0x5c, 0x58, 0xbd, 0x35, 0x0b, 0x61, 0x11,
	0xe1, 0xfe, 0xa2, 0xdc, 0x5a, 0x4a, 0x62, 0xc2, 0x46, 0xdc, 0xbf, 0xf1, 0x31, 0xf4, 0x4d, 0xb6,
	0x99, 0x2f, 0x73, 0xda, 0x89, 0x09, 0x23, 0xbc, 0x67, 0xb2, 0xcd, 0x2c, 0xc7, 0x33, 0x18, 0x14,
	0xd2, 0xae, 0x2a, 0xbe, 0xeb, 0xf9, 0x7e, 0x05, 0x67, 0x39, 0xc6, 0x10, 0x96, 0x46, 0x88, 0x4d,
	0xe9, 0x64, 0xbe, 0x16, 0x34, 0x88, 0x09, 0x1b, 0xf2, 0x9b, 0x14, 0xbe, 0x80, 0x07, 0xd9, 0xc2,
	0xc9, 0x9d, 0x98, 0x97, 0xda, 0x38, 0x4b, 0x21, 0xee, 0xb2, 0x1e, 0x0f, 0x6b, 0xee, 0xa2, 0xa2,
	0xaa, 0x20, 0x5f, 0xb4, 0x12, 0x34, 0x8c, 0x09, 0x0b, 0xb8, 0x7f, 0x27, 0xbf, 0x09, 0xf4, 0xeb,
	0xc0, 0x38, 0x86, 0x8e, 0x2c, 0x7c, 0xca, 0x80, 0x77, 0x64, 0x81, 0x4f, 0x61, 0xe8, 0x32, 0xbb,
	0x9a, 0xcb, 0xc2, 0xd2, 0x4e, 0xdc, 0x65, 0x01, 0x1f, 0x54, 0xf8, 0x6d, 0x61, 0xf1, 0x35, 0x04,
	0xa6, 0xe9, 0x47, 0x7b, 0x31, 0x61, 0xe1, 0xf4, 0x6c, 0x52, 0x1f, 0x68, 0xd2, 0xaa, 0xcf, 0xff,
	0x2b, 0xf1, 0x1c, 0x82, 0x75, 0x66, 0xdd, 0xbc, 0x94, 0x6a, 0x49, 0x07, 0x31, 0x61, 0x5d, 0x3e,
	0xac, 0x88, 0x0b, 0xa9, 0x96, 0x18, 0xc1, 0xf0, 0x4a, 0x5b, 0xa7, 0xb2, 0x8d, 0xa0, 0x23, 0x1f,
	0xe2, 0x80, 0x91, 0xc2, 0x60, 0x27, 0x8c, 0x95, 0x5a, 0xd1, 0xb1, 0x5f, 0x6b, 0x60, 0xb5, 0x65,
	0xaf, 0xb6, 0xae, 0xd0, 0xd7, 0x8a, 0x9e, 0xf8, 0xab, 0x1c, 0x70, 0x72, 0x0a, 0xf8, 0x4e, 0x5a,
	0x57, 0x07, 0xb2, 0x5c, 0x7c, 0xda, 0x0a, 0xeb, 0x92, 0x37, 0xf0, 0xe8, 0x16, 0x6b, 0x4b, 0xad,
	0xac, 0x40, 0x06, 0x83, 0xfd, 0x07, 0xa7, 0x24, 0xee, 0xb2, 0x70, 0x3a, 0x6e, 0x15, 0x6a, 0xc6,
	0x49, 0x02, 0x0f, 0x67, 0xc2, 0x35, 0x35, 0xbd, 0x69, 0xfb, 0x76, 0xd3, 0xbf, 0x04, 0x46, 0xb5,
	0xe2, 0x52, 0x98, 0x9d, 0x5c, 0x08, 0x9c, 0x00, 0x5c, 0x7e, 0x56, 0x8b, 0xe6, 0xd6, 0xb7, 0xcd,
	0xa3, 0x16, 0x4e, 0xee, 0x61, 0x0e, 0xe1, 0x8d, 0x98, 0x18, 0x35, 0x82, 0xe3, 0x46, 0xd1, 0xf9,
	0x9d, 0xb3, 0xba, 0x57, 0x12, 0x7d, 0xff, 0xf5, 0xe7, 0x47, 0xe7, 0x14, 0x31, 0xdd, 0xbd, 0x4c,
	0x6b, 0x5d, 0xba, 0x6f, 0x82, 0xef, 0x21, 0x38, 0x34, 0x41, 0xda, 0xb8, 0xb4, 0xcb, 0x1d, 0x85,
	0x7b, 0xee, 0x2d, 0x29, 0x3e, 0x39, 0xb2, 0x4c, 0xbf, 0xca, 0xe2, 0x5b, 0xde, 0xf7, 0xff, 0xc2,
	0xab, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0x5c, 0xf3, 0xb5, 0x42, 0x03, 0x00, 0x00,
}
