// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tes.proto

/*
Package tes is a generated protocol buffer package.

It is generated from these files:
	tes.proto

It has these top-level messages:
	Task
	TaskParameter
	Ports
	Executor
	Resources
	TaskLog
	ExecutorLog
	OutputFileLog
	CreateTaskResponse
	GetTaskRequest
	ListTasksRequest
	ListTasksResponse
	CancelTaskRequest
	CancelTaskResponse
	RestartTaskRequest
	RestartTaskResponse
	ServiceInfoRequest
	ServiceInfo
*/
package tes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileType int32

const (
	FileType_FILE      FileType = 0
	FileType_DIRECTORY FileType = 1
)

var FileType_name = map[int32]string{
	0: "FILE",
	1: "DIRECTORY",
}
var FileType_value = map[string]int32{
	"FILE":      0,
	"DIRECTORY": 1,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// OUTPUT ONLY
//
// Task states.
type State int32

const (
	State_UNKNOWN      State = 0
	State_QUEUED       State = 1
	State_INITIALIZING State = 2
	State_RUNNING      State = 3
	// An implementation *may* have the ability to pause a task,
	// but this is not required.
	State_PAUSED       State = 4
	State_COMPLETE     State = 5
	State_ERROR        State = 6
	State_SYSTEM_ERROR State = 7
	State_CANCELED     State = 8
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "QUEUED",
	2: "INITIALIZING",
	3: "RUNNING",
	4: "PAUSED",
	5: "COMPLETE",
	6: "ERROR",
	7: "SYSTEM_ERROR",
	8: "CANCELED",
}
var State_value = map[string]int32{
	"UNKNOWN":      0,
	"QUEUED":       1,
	"INITIALIZING": 2,
	"RUNNING":      3,
	"PAUSED":       4,
	"COMPLETE":     5,
	"ERROR":        6,
	"SYSTEM_ERROR": 7,
	"CANCELED":     8,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// TaskView affects the fields returned by the ListTasks endpoint.
//
// Some of the fields in task can be large strings (e.g. logs),
// which can be a burden on the network. In the default BASIC view,
// these heavyweight fields are not included, however, a client may
// request the FULL version to include these fields.
type TaskView int32

const (
	// Task message will include ONLY the fields:
	//   Task.Id
	//   Task.State
	TaskView_MINIMAL TaskView = 0
	// Task message will include all fields EXCEPT:
	//   Task.ExecutorLog.stdout
	//   Task.ExecutorLog.stderr
	//   TaskParameter.Contents in Task.Inputs
	TaskView_BASIC TaskView = 1
	// Task message includes all fields.
	TaskView_FULL TaskView = 2
)

var TaskView_name = map[int32]string{
	0: "MINIMAL",
	1: "BASIC",
	2: "FULL",
}
var TaskView_value = map[string]int32{
	"MINIMAL": 0,
	"BASIC":   1,
	"FULL":    2,
}

func (x TaskView) String() string {
	return proto.EnumName(TaskView_name, int32(x))
}
func (TaskView) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Task describes an instance of a task.
type Task struct {
	// OUTPUT ONLY
	//
	// Task identifier assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// OUTPUT ONLY
	State State `protobuf:"varint,2,opt,name=state,enum=tes.State" json:"state,omitempty"`
	// OPTIONAL
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	//
	// Describes the project this task is associated with.
	// Commonly used for billing on cloud providers (AWS, Google Cloud, etc).
	Project string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	// OPTIONAL
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// OPTIONAL
	//
	// Input files.
	// Inputs will be downloaded and mounted into the executor container.
	Inputs []*TaskParameter `protobuf:"bytes,6,rep,name=inputs" json:"inputs,omitempty"`
	// OPTIONAL
	//
	// Output files.
	// Outputs will be uploaded from the executor container to long-term storage.
	Outputs []*TaskParameter `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	// OPTIONAL
	//
	// Request that the task be run with these resources.
	Resources *Resources `protobuf:"bytes,8,opt,name=resources" json:"resources,omitempty"`
	// REQUIRED
	//
	// A list of executors to be run, sequentially.
	Executors []*Executor `protobuf:"bytes,9,rep,name=executors" json:"executors,omitempty"`
	// OPTIONAL
	//
	// Declared volumes.
	// Volumes are shared between executors. Volumes for inputs and outputs are
	// inferred and should not be delcared here.
	Volumes []string `protobuf:"bytes,10,rep,name=volumes" json:"volumes,omitempty"`
	// OPTIONAL
	//
	// A key-value map of arbitrary tags.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" datastore:"-"`
	// OUTPUT ONLY
	//
	// Task logging information.
	// Normally, this will contain only one entry, but in the case where
	// a task fails and is retried, an entry will be appended to this list.
	Logs []*TaskLog `protobuf:"bytes,12,rep,name=logs" json:"logs,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetInputs() []*TaskParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Task) GetOutputs() []*TaskParameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Task) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Task) GetExecutors() []*Executor {
	if m != nil {
		return m.Executors
	}
	return nil
}

func (m *Task) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Task) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Task) GetLogs() []*TaskLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

// TaskParameter describes input and output files for a Task.
type TaskParameter struct {
	// OPTIONAL
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// REQUIRED
	//
	// URL in long term storage, for example:
	// s3://my-object-store/file1
	// gs://my-bucket/file2
	// file:///path/to/my/file
	// /path/to/my/file
	// etc...
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// REQUIRED
	//
	// Path of the file inside the container.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	//
	// Type of the file, FILE or DIRECTORY
	Type FileType `protobuf:"varint,5,opt,name=type,enum=tes.FileType" json:"type,omitempty"`
	// OPTIONAL
	//
	// File contents literal.
	// Implementations should support a minimum of 128 KiB in this field and may define its own maximum.
	// UTF-8 encoded
	Contents string `protobuf:"bytes,6,opt,name=contents" json:"contents,omitempty"`
}

func (m *TaskParameter) Reset()                    { *m = TaskParameter{} }
func (m *TaskParameter) String() string            { return proto.CompactTextString(m) }
func (*TaskParameter) ProtoMessage()               {}
func (*TaskParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskParameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaskParameter) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TaskParameter) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TaskParameter) GetType() FileType {
	if m != nil {
		return m.Type
	}
	return FileType_FILE
}

func (m *TaskParameter) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

// Ports describes the port mapping between the container and host.
type Ports struct {
	// REQUIRED
	//
	// Port number opened inside the container.
	Container uint32 `protobuf:"varint,1,opt,name=container" json:"container,omitempty" datastore:"-"`
	// OPTIONAL
	//
	// Port number opened on the host. Must be greater than 1024.
	// Defaults to 0, which assigns a random port on the host.
	Host uint32 `protobuf:"varint,2,opt,name=host" json:"host,omitempty" datastore:"-"`
}

func (m *Ports) Reset()                    { *m = Ports{} }
func (m *Ports) String() string            { return proto.CompactTextString(m) }
func (*Ports) ProtoMessage()               {}
func (*Ports) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ports) GetContainer() uint32 {
	if m != nil {
		return m.Container
	}
	return 0
}

func (m *Ports) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

// Executor describes a command to run, and its environment.
type Executor struct {
	// REQUIRED
	//
	// Name of the container image, for example:
	// ubuntu
	// quay.io/aptible/ubuntu
	// gcr.io/my-org/my-image
	// etc...
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// REQUIRED
	//
	// The command to be executed.
	Cmd []string `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
	// OPTIONAL
	//
	// The working directory that the command will be executed in.
	// Defaults to the directory set by the container image.
	Workdir string `protobuf:"bytes,3,opt,name=workdir" json:"workdir,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file which will be piped
	// to the command's stdin.
	Stdin string `protobuf:"bytes,6,opt,name=stdin" json:"stdin,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file where the command's
	// stdout will be written to.
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file where the command's
	// stderr will be written to.
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// OPTIONAL
	//
	// Port to expose from within the container, blank if none.
	Ports []*Ports `protobuf:"bytes,7,rep,name=ports" json:"ports,omitempty"`
	// OPTIONAL
	//
	// Enviromental variables to set within the container.
	Environ map[string]string `protobuf:"bytes,8,rep,name=environ" json:"environ,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" datastore:"-"`
}

func (m *Executor) Reset()                    { *m = Executor{} }
func (m *Executor) String() string            { return proto.CompactTextString(m) }
func (*Executor) ProtoMessage()               {}
func (*Executor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Executor) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *Executor) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Executor) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *Executor) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

func (m *Executor) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Executor) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *Executor) GetPorts() []*Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Executor) GetEnviron() map[string]string {
	if m != nil {
		return m.Environ
	}
	return nil
}

// Resources describes the resources requested by a task.
type Resources struct {
	// OPTIONAL
	//
	// Requested number of CPUs
	CpuCores uint32 `protobuf:"varint,1,opt,name=cpu_cores,json=cpuCores" json:"cpu_cores,omitempty"`
	// OPTIONAL
	//
	// Is the task allowed to run on preemptible compute instances (e.g. AWS Spot)?
	Preemptible bool `protobuf:"varint,2,opt,name=preemptible" json:"preemptible,omitempty"`
	// OPTIONAL
	//
	// Requested RAM required in gigabytes (GB)
	RamGb float64 `protobuf:"fixed64,3,opt,name=ram_gb,json=ramGb" json:"ram_gb,omitempty"`
	// OPTIONAL
	//
	// Requested disk size in gigabytes (GB)
	SizeGb float64 `protobuf:"fixed64,4,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	// OPTIONAL
	//
	// Request that the task be run in these compute zones.
	Zones []string `protobuf:"bytes,5,rep,name=zones" json:"zones,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Resources) GetCpuCores() uint32 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *Resources) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Resources) GetRamGb() float64 {
	if m != nil {
		return m.RamGb
	}
	return 0
}

func (m *Resources) GetSizeGb() float64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *Resources) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

// OUTPUT ONLY
//
// TaskLog describes logging information related to a Task.
type TaskLog struct {
	// REQUIRED
	//
	// Logs for each executor
	Logs []*ExecutorLog `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	// OPTIONAL
	//
	// Arbitrary logging metadata included by the implementation.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" datastore:"-"`
	// OPTIONAL
	//
	// When the task started, in RFC 3339 format.
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// OPTIONAL
	//
	// When the task ended, in RFC 3339 format.
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// REQUIRED
	//
	// Information about all output files. Directory outputs are
	// flattened into separate items.
	Outputs []*OutputFileLog `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *TaskLog) Reset()                    { *m = TaskLog{} }
func (m *TaskLog) String() string            { return proto.CompactTextString(m) }
func (*TaskLog) ProtoMessage()               {}
func (*TaskLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TaskLog) GetLogs() []*ExecutorLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *TaskLog) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskLog) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TaskLog) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TaskLog) GetOutputs() []*OutputFileLog {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// OUTPUT ONLY
//
// ExecutorLog describes logging information related to an Executor.
type ExecutorLog struct {
	// OPTIONAL
	//
	// Time the executor started, in RFC 3339 format.
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// OPTIONAL
	//
	// Time the executor ended, in RFC 3339 format.
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// OPTIONAL
	//
	// Stdout tail.
	// This is not guaranteed to be the entire log.
	// Implementations determine the maximum size.
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// OPTIONAL
	//
	// Stderr tail.
	// This is not guaranteed to be the entire log.
	// Implementations determine the maximum size.
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// REQUIRED
	//
	// Exit code.
	ExitCode int32 `protobuf:"varint,6,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// OPTIONAL
	//
	// IP address of host.
	HostIp string `protobuf:"bytes,7,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`
	// OPTIONAL
	//
	// Ports mapped between the container and host.
	Ports []*Ports `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
}

func (m *ExecutorLog) Reset()                    { *m = ExecutorLog{} }
func (m *ExecutorLog) String() string            { return proto.CompactTextString(m) }
func (*ExecutorLog) ProtoMessage()               {}
func (*ExecutorLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExecutorLog) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ExecutorLog) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ExecutorLog) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *ExecutorLog) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *ExecutorLog) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ExecutorLog) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

func (m *ExecutorLog) GetPorts() []*Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

// OUTPUT ONLY
//
// OutputFileLog describes a single output file. This describes
// file details after the task has completed successfully,
// for logging purposes.
type OutputFileLog struct {
	// REQUIRED
	//
	// URL of the file in storage, e.g. s3://bucket/file.txt
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// REQUIRED
	//
	// Path of the file inside the container.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	//
	// Size of the file in bytes.
	SizeBytes int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *OutputFileLog) Reset()                    { *m = OutputFileLog{} }
func (m *OutputFileLog) String() string            { return proto.CompactTextString(m) }
func (*OutputFileLog) ProtoMessage()               {}
func (*OutputFileLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OutputFileLog) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OutputFileLog) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *OutputFileLog) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

// OUTPUT ONLY
//
// CreateTaskResponse describes a response from the CreateTask endpoint.
type CreateTaskResponse struct {
	// REQUIRED
	//
	// Task identifier assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateTaskResponse) Reset()                    { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()               {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateTaskResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// GetTaskRequest describes a request to the GetTask endpoint.
type GetTaskRequest struct {
	// REQUIRED
	//
	// Task identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// OPTIONAL
	//
	// Affects the fields included in the returned Task messages.
	// See TaskView below.
	View TaskView `protobuf:"varint,2,opt,name=view,enum=tes.TaskView" json:"view,omitempty"`
}

func (m *GetTaskRequest) Reset()                    { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()               {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetTaskRequest) GetView() TaskView {
	if m != nil {
		return m.View
	}
	return TaskView_MINIMAL
}

// ListTasksRequest describes a request to the ListTasks service endpoint.
type ListTasksRequest struct {
	// OPTIONAL
	//
	// Filter the task list to include tasks in this project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// OPTIONAL
	//
	// Filter the list to include tasks where the name matches this prefix.
	// If unspecified, no task name filtering is done.
	NamePrefix string `protobuf:"bytes,2,opt,name=name_prefix,json=namePrefix" json:"name_prefix,omitempty"`
	// OPTIONAL
	//
	// Number of tasks to return in one page.
	// Must be less than 2048. Defaults to 256.
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// OPTIONAL
	//
	// Page token is used to retrieve the next page of results.
	// If unspecified, returns the first page of results.
	// See ListTasksResponse.next_page_token
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// OPTIONAL
	//
	// Affects the fields included in the returned Task messages.
	// See TaskView below.
	View TaskView `protobuf:"varint,5,opt,name=view,enum=tes.TaskView" json:"view,omitempty"`
}

func (m *ListTasksRequest) Reset()                    { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()               {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListTasksRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListTasksRequest) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *ListTasksRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTasksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTasksRequest) GetView() TaskView {
	if m != nil {
		return m.View
	}
	return TaskView_MINIMAL
}

// OUTPUT ONLY
//
// ListTasksResponse describes a response from the ListTasks endpoint.
type ListTasksResponse struct {
	// REQUIRED
	//
	// List of lightweight task descriptions.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	// OPTIONAL
	//
	// Token used to return the next page of results.
	// See TaskListRequest.next_page_token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListTasksResponse) Reset()                    { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()               {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *ListTasksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// CancelTaskRequest describes a request to the CancelTask endpoint.
type CancelTaskRequest struct {
	// REQUIRED
	//
	// Task identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CancelTaskRequest) Reset()                    { *m = CancelTaskRequest{} }
func (m *CancelTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelTaskRequest) ProtoMessage()               {}
func (*CancelTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CancelTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// OUTPUT ONLY
//
// CancelTaskResponse describes a response from the CancelTask endpoint.
type CancelTaskResponse struct {
}

func (m *CancelTaskResponse) Reset()                    { *m = CancelTaskResponse{} }
func (m *CancelTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CancelTaskResponse) ProtoMessage()               {}
func (*CancelTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// RestartTaskRequest describes a request to the RestartTask endpoint.
type RestartTaskRequest struct {
	// REQUIRED
	//
	// Task identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RestartTaskRequest) Reset()                    { *m = RestartTaskRequest{} }
func (m *RestartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*RestartTaskRequest) ProtoMessage()               {}
func (*RestartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RestartTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// OUTPUT ONLY
//
// RestartTaskResponse describes a response from the RestartTask endpoint.
type RestartTaskResponse struct {
}

func (m *RestartTaskResponse) Reset()                    { *m = RestartTaskResponse{} }
func (m *RestartTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*RestartTaskResponse) ProtoMessage()               {}
func (*RestartTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// ServiceInfoRequest describes a request to the ServiceInfo endpoint.
type ServiceInfoRequest struct {
}

func (m *ServiceInfoRequest) Reset()                    { *m = ServiceInfoRequest{} }
func (m *ServiceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfoRequest) ProtoMessage()               {}
func (*ServiceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// OUTPUT ONLY
//
// ServiceInfo describes information about the service,
// such as storage details, resource availability,
// and other documentation.
type ServiceInfo struct {
	// Returns the name of the service, e.g. "ohsu-compbio-funnel".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Returns a documentation string, e.g. "Hey, we're OHSU Comp. Bio!".
	Doc string `protobuf:"bytes,2,opt,name=doc" json:"doc,omitempty"`
	// Lists some, but not necessarily all, storage locations supported by the service.
	//
	// Must be in a valid URL format.
	// e.g.
	// file:///path/to/local/funnel-storage
	// s3://ohsu-compbio-funnel/storage
	// etc.
	Storage []string `protobuf:"bytes,3,rep,name=storage" json:"storage,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ServiceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceInfo) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *ServiceInfo) GetStorage() []string {
	if m != nil {
		return m.Storage
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "tes.Task")
	proto.RegisterType((*TaskParameter)(nil), "tes.TaskParameter")
	proto.RegisterType((*Ports)(nil), "tes.Ports")
	proto.RegisterType((*Executor)(nil), "tes.Executor")
	proto.RegisterType((*Resources)(nil), "tes.Resources")
	proto.RegisterType((*TaskLog)(nil), "tes.TaskLog")
	proto.RegisterType((*ExecutorLog)(nil), "tes.ExecutorLog")
	proto.RegisterType((*OutputFileLog)(nil), "tes.OutputFileLog")
	proto.RegisterType((*CreateTaskResponse)(nil), "tes.CreateTaskResponse")
	proto.RegisterType((*GetTaskRequest)(nil), "tes.GetTaskRequest")
	proto.RegisterType((*ListTasksRequest)(nil), "tes.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "tes.ListTasksResponse")
	proto.RegisterType((*CancelTaskRequest)(nil), "tes.CancelTaskRequest")
	proto.RegisterType((*CancelTaskResponse)(nil), "tes.CancelTaskResponse")
	proto.RegisterType((*RestartTaskRequest)(nil), "tes.RestartTaskRequest")
	proto.RegisterType((*RestartTaskResponse)(nil), "tes.RestartTaskResponse")
	proto.RegisterType((*ServiceInfoRequest)(nil), "tes.ServiceInfoRequest")
	proto.RegisterType((*ServiceInfo)(nil), "tes.ServiceInfo")
	proto.RegisterEnum("tes.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("tes.State", State_name, State_value)
	proto.RegisterEnum("tes.TaskView", TaskView_name, TaskView_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	// GetServiceInfo provides information about the service,
	// such as storage details, resource availability, and
	// other documentation.
	GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
	// Create a new task.
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// List tasks.
	// TaskView is requested as such: "v1/tasks?view=BASIC"
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Get a task.
	// TaskView is requested as such: "v1/tasks/{id}?view=FULL"
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Cancel a task.
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	// Restart a task.
	RestartTask(ctx context.Context, in *RestartTaskRequest, opts ...grpc.CallOption) (*RestartTaskResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/ListTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	out := new(CancelTaskResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/CancelTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RestartTask(ctx context.Context, in *RestartTaskRequest, opts ...grpc.CallOption) (*RestartTaskResponse, error) {
	out := new(RestartTaskResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/RestartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	// GetServiceInfo provides information about the service,
	// such as storage details, resource availability, and
	// other documentation.
	GetServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfo, error)
	// Create a new task.
	CreateTask(context.Context, *Task) (*CreateTaskResponse, error)
	// List tasks.
	// TaskView is requested as such: "v1/tasks?view=BASIC"
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Get a task.
	// TaskView is requested as such: "v1/tasks/{id}?view=FULL"
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	// Cancel a task.
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	// Restart a task.
	RestartTask(context.Context, *RestartTaskRequest) (*RestartTaskResponse, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RestartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RestartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/RestartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RestartTask(ctx, req.(*RestartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tes.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _TaskService_GetServiceInfo_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _TaskService_CancelTask_Handler,
		},
		{
			MethodName: "RestartTask",
			Handler:    _TaskService_RestartTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tes.proto",
}

func init() { proto.RegisterFile("tes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xee, 0xfa, 0x73, 0xf7, 0x38, 0xce, 0xbb, 0x9d, 0x26, 0xe9, 0xbe, 0x6e, 0x4b, 0xdd, 0x6d,
	0x05, 0x51, 0x28, 0x89, 0x08, 0x88, 0x8f, 0x70, 0x95, 0x3a, 0x6e, 0x64, 0xe1, 0x38, 0x61, 0xe2,
	0x80, 0x0a, 0x95, 0xcc, 0xc6, 0x3b, 0x75, 0x97, 0xd8, 0x3b, 0xcb, 0xce, 0x38, 0x6d, 0x8a, 0xb8,
	0x41, 0xbd, 0xe4, 0x02, 0x89, 0x7f, 0x81, 0x90, 0xf8, 0x29, 0x5c, 0x70, 0xc9, 0x2d, 0x3f, 0x04,
	0x9d, 0xd9, 0xd9, 0xf5, 0x3a, 0xa6, 0x95, 0x7a, 0xb7, 0xe7, 0x39, 0xcf, 0x9c, 0x39, 0xdf, 0xb3,
	0x60, 0x49, 0x26, 0x36, 0xa3, 0x98, 0x4b, 0x4e, 0x8a, 0x92, 0x89, 0xc6, 0xcd, 0x11, 0xe7, 0xa3,
	0x31, 0xdb, 0xf2, 0xa2, 0x60, 0xcb, 0x0b, 0x43, 0x2e, 0x3d, 0x19, 0xf0, 0x50, 0x53, 0xdc, 0xbf,
	0x8b, 0x50, 0xea, 0x7b, 0xe2, 0x8c, 0x2c, 0x43, 0x21, 0xf0, 0x1d, 0xa3, 0x69, 0xac, 0x5b, 0xb4,
	0x10, 0xf8, 0xa4, 0x09, 0x65, 0x21, 0x3d, 0xc9, 0x9c, 0x42, 0xd3, 0x58, 0x5f, 0xde, 0x86, 0x4d,
	0x34, 0x7b, 0x8c, 0x08, 0x4d, 0x14, 0x84, 0x40, 0x29, 0xf4, 0x26, 0xcc, 0x29, 0xaa, 0x33, 0xea,
	0x9b, 0x38, 0x50, 0x8d, 0x62, 0xfe, 0x1d, 0x1b, 0x4a, 0xa7, 0xa4, 0xe0, 0x54, 0x24, 0x4d, 0xa8,
	0xf9, 0x4c, 0x0c, 0xe3, 0x20, 0xc2, 0xeb, 0x9d, 0xb2, 0xd2, 0xe6, 0x21, 0xb2, 0x01, 0x95, 0x20,
	0x8c, 0xa6, 0x52, 0x38, 0x95, 0x66, 0x71, 0xbd, 0xb6, 0x4d, 0xd4, 0x95, 0xe8, 0xdc, 0x91, 0x17,
	0x7b, 0x13, 0x26, 0x59, 0x4c, 0x35, 0x83, 0xdc, 0x87, 0x2a, 0x9f, 0x4a, 0x45, 0xae, 0xbe, 0x92,
	0x9c, 0x52, 0xc8, 0x7d, 0xb0, 0x62, 0x26, 0xf8, 0x34, 0x1e, 0x32, 0xe1, 0x98, 0x4d, 0x63, 0xbd,
	0xb6, 0xbd, 0xac, 0xf8, 0x34, 0x45, 0xe9, 0x8c, 0x40, 0xde, 0x05, 0x8b, 0x3d, 0x67, 0xc3, 0xa9,
	0xe4, 0xb1, 0x70, 0x2c, 0x65, 0xbd, 0xae, 0xd8, 0x6d, 0x8d, 0xd2, 0x99, 0x1e, 0x03, 0x3e, 0xe7,
	0xe3, 0xe9, 0x84, 0x09, 0x07, 0x9a, 0x45, 0x0c, 0x58, 0x8b, 0xe4, 0x1d, 0x28, 0x49, 0x6f, 0x24,
	0x9c, 0x9a, 0xb2, 0x70, 0x2d, 0xf3, 0x6f, 0xb3, 0xef, 0x8d, 0x44, 0x3b, 0x94, 0xf1, 0x05, 0x55,
	0x04, 0xd2, 0x84, 0xd2, 0x98, 0x8f, 0x84, 0xb3, 0xa4, 0x88, 0x4b, 0x19, 0xb1, 0xcb, 0x47, 0x54,
	0x69, 0x1a, 0x1f, 0x83, 0x95, 0x1d, 0x22, 0x36, 0x14, 0xcf, 0xd8, 0x85, 0xae, 0x14, 0x7e, 0x92,
	0x15, 0x28, 0x9f, 0x7b, 0xe3, 0x69, 0x52, 0x2a, 0x8b, 0x26, 0xc2, 0x4e, 0xe1, 0x13, 0xc3, 0xfd,
	0xcd, 0x80, 0xfa, 0x5c, 0x4e, 0xb2, 0xa2, 0x19, 0xb9, 0xa2, 0x5d, 0x2a, 0x4d, 0x61, 0xb1, 0x34,
	0x36, 0x14, 0xa7, 0xf1, 0x58, 0x57, 0x1a, 0x3f, 0xd1, 0x4e, 0xe4, 0xc9, 0xa7, 0xba, 0xca, 0xea,
	0x9b, 0xdc, 0x81, 0x92, 0xbc, 0x88, 0x98, 0xaa, 0xed, 0xb2, 0xce, 0xd9, 0xc3, 0x60, 0xcc, 0xfa,
	0x17, 0x11, 0xa3, 0x4a, 0x45, 0x1a, 0x60, 0x0e, 0x79, 0x28, 0x59, 0xa8, 0xaa, 0x8c, 0x47, 0x33,
	0xd9, 0xfd, 0x14, 0xca, 0x47, 0x3c, 0x96, 0x82, 0xdc, 0x04, 0x0b, 0x41, 0x2f, 0x08, 0x59, 0xac,
	0x1c, 0xad, 0xd3, 0x19, 0x80, 0x37, 0x3f, 0xe5, 0x42, 0x2a, 0x37, 0xeb, 0x54, 0x7d, 0xbb, 0x7f,
	0x14, 0xc0, 0x4c, 0xab, 0x43, 0x6e, 0x01, 0x04, 0x13, 0x6f, 0xc4, 0x06, 0xb9, 0x40, 0x2d, 0x85,
	0xf4, 0x30, 0x5a, 0x1b, 0x8a, 0xc3, 0x89, 0xef, 0x14, 0x54, 0xb5, 0xf0, 0x13, 0x6b, 0xf8, 0x8c,
	0xc7, 0x67, 0x7e, 0x10, 0xeb, 0x08, 0x53, 0x11, 0x33, 0x2b, 0xa4, 0x1f, 0x84, 0xda, 0xd7, 0x44,
	0x20, 0x6b, 0x50, 0x11, 0xd2, 0xe7, 0xd3, 0xb4, 0xc7, 0xb5, 0xa4, 0x71, 0x16, 0xc7, 0xba, 0xbb,
	0xb5, 0x84, 0xa3, 0x14, 0x61, 0x60, 0xba, 0x55, 0x93, 0x51, 0x52, 0xa1, 0xd2, 0x44, 0x41, 0x3e,
	0x84, 0x2a, 0x0b, 0xcf, 0x83, 0x98, 0x87, 0x8e, 0xa9, 0x38, 0x8d, 0xb9, 0x86, 0xdb, 0x6c, 0x27,
	0xca, 0xa4, 0x6b, 0x52, 0x6a, 0x63, 0x07, 0x96, 0xf2, 0x8a, 0x37, 0xea, 0x8c, 0x5f, 0x0c, 0xb0,
	0xb2, 0xee, 0x27, 0x37, 0xc0, 0x1a, 0x46, 0xd3, 0xc1, 0x90, 0xc7, 0x4c, 0xe8, 0x8c, 0x9b, 0xc3,
	0x68, 0xda, 0x42, 0x19, 0xdb, 0x23, 0x8a, 0x19, 0x9b, 0x44, 0x32, 0x38, 0x1d, 0x27, 0xa6, 0x4c,
	0x9a, 0x87, 0xc8, 0x2a, 0x54, 0x62, 0x6f, 0x32, 0x18, 0x9d, 0xaa, 0xfc, 0x19, 0xb4, 0x1c, 0x7b,
	0x93, 0xfd, 0x53, 0x72, 0x1d, 0xaa, 0x22, 0x78, 0xc1, 0x10, 0x2f, 0x29, 0xbc, 0x82, 0xe2, 0xfe,
	0x29, 0xba, 0xf5, 0x82, 0x87, 0x4c, 0x38, 0x65, 0x55, 0x84, 0x44, 0x70, 0x7f, 0x2e, 0x40, 0x55,
	0xf7, 0x3d, 0xb9, 0xa7, 0x67, 0xc2, 0x50, 0xd9, 0xb0, 0xe7, 0xb2, 0x91, 0xcd, 0x05, 0xf9, 0x08,
	0xcc, 0x09, 0x93, 0x9e, 0xef, 0x49, 0x4f, 0xd5, 0x33, 0xcd, 0x9b, 0xb6, 0xb2, 0x79, 0xa0, 0x95,
	0x49, 0xde, 0x32, 0x2e, 0x76, 0x88, 0x90, 0x5e, 0x2c, 0x07, 0x32, 0xc8, 0xf6, 0x97, 0xa5, 0x90,
	0x7e, 0x30, 0x61, 0xe4, 0xff, 0x60, 0xb2, 0xd0, 0x4f, 0x94, 0x7a, 0x8b, 0xb1, 0xd0, 0x57, 0xaa,
	0xdc, 0xde, 0x29, 0xe7, 0xf6, 0xce, 0xa1, 0xc2, 0xb0, 0xd7, 0xd1, 0xb9, 0x94, 0xd2, 0xf8, 0x0c,
	0xea, 0x73, 0x2e, 0xbc, 0x51, 0x85, 0xfe, 0x34, 0xa0, 0x96, 0x0b, 0xf9, 0x92, 0xd3, 0x85, 0xd7,
	0x39, 0x5d, 0x9c, 0x77, 0xfa, 0x4d, 0xfb, 0xf5, 0x06, 0x2e, 0xc0, 0x40, 0x0e, 0x86, 0xdc, 0x67,
	0xaa, 0xf3, 0xcb, 0xd4, 0x44, 0xa0, 0xc5, 0x7d, 0x86, 0x45, 0xc5, 0x91, 0x1b, 0x04, 0x91, 0x53,
	0x4d, 0x4e, 0xa1, 0xd8, 0x89, 0x66, 0x5d, 0x6e, 0xbe, 0xa2, 0xcb, 0xdd, 0x3e, 0xd4, 0xe7, 0x12,
	0x95, 0xae, 0x15, 0x63, 0x71, 0xad, 0x14, 0x72, 0x6b, 0x05, 0x03, 0xc7, 0x36, 0x3a, 0xbd, 0x90,
	0x4c, 0xa8, 0xd8, 0x8a, 0xd4, 0x42, 0xe4, 0x01, 0x02, 0xee, 0x3d, 0x20, 0xad, 0x98, 0x79, 0x92,
	0x61, 0xd5, 0x29, 0x13, 0x11, 0x0f, 0x05, 0xbb, 0xfc, 0x9c, 0xb9, 0x2d, 0x58, 0xde, 0x67, 0x32,
	0xa1, 0x7c, 0x3f, 0x65, 0x42, 0x2e, 0x3c, 0x78, 0x77, 0xa0, 0x74, 0x1e, 0xb0, 0x67, 0xfa, 0xbd,
	0xab, 0x67, 0x8d, 0xf4, 0x65, 0xc0, 0x9e, 0x51, 0xa5, 0x72, 0x7f, 0x37, 0xc0, 0xee, 0x06, 0x42,
	0x99, 0x11, 0xa9, 0x9d, 0xdc, 0x93, 0x67, 0xcc, 0x3f, 0x79, 0xb7, 0xa1, 0x86, 0x2b, 0x68, 0x10,
	0xc5, 0xec, 0x49, 0xf0, 0x5c, 0xc7, 0x04, 0x08, 0x1d, 0x29, 0x04, 0x13, 0x1d, 0xe1, 0xa2, 0xc2,
	0x60, 0x54, 0x60, 0x75, 0x6a, 0x22, 0x70, 0x1c, 0xbc, 0x60, 0x18, 0xb6, 0x52, 0x4a, 0x7e, 0xc6,
	0x42, 0x5d, 0x39, 0x45, 0xef, 0x23, 0x90, 0xb9, 0x5b, 0x7e, 0xb5, 0xbb, 0x8f, 0xe1, 0x6a, 0xce,
	0x5b, 0x9d, 0x98, 0xdb, 0x50, 0x96, 0x08, 0xe8, 0xd1, 0xb2, 0xb2, 0x83, 0x34, 0xc1, 0xc9, 0xdb,
	0xf0, 0xbf, 0x90, 0x3d, 0x97, 0x83, 0xdc, 0xe5, 0x89, 0xe7, 0x75, 0x84, 0x8f, 0x52, 0x07, 0xdc,
	0xbb, 0x70, 0xb5, 0xe5, 0x85, 0x43, 0x36, 0x7e, 0x4d, 0x52, 0xdd, 0x15, 0x20, 0x79, 0x52, 0xe2,
	0x03, 0x96, 0x8c, 0xb2, 0xa4, 0x75, 0x5f, 0x73, 0x76, 0x15, 0xae, 0xcd, 0xb1, 0xf4, 0xe1, 0x15,
	0x20, 0xc7, 0x2c, 0x3e, 0x0f, 0x86, 0xac, 0x13, 0x3e, 0xe1, 0xfa, 0xb0, 0x7b, 0x00, 0xb5, 0x1c,
	0xfa, 0x9f, 0xcf, 0x9c, 0x0d, 0x45, 0x9f, 0x0f, 0x75, 0x30, 0xf8, 0x89, 0xa5, 0x13, 0x92, 0xc7,
	0xde, 0x08, 0xb3, 0xaf, 0x1e, 0x6f, 0x2d, 0x6e, 0xdc, 0x05, 0x33, 0x7d, 0xb9, 0x88, 0x09, 0xa5,
	0x87, 0x9d, 0x6e, 0xdb, 0xbe, 0x42, 0xea, 0x60, 0xed, 0x75, 0x68, 0xbb, 0xd5, 0x3f, 0xa4, 0x8f,
	0x6c, 0x63, 0xe3, 0xa5, 0x01, 0x65, 0xf5, 0x47, 0x44, 0x6a, 0x50, 0x3d, 0xe9, 0x7d, 0xde, 0x3b,
	0xfc, 0xaa, 0x67, 0x5f, 0x21, 0x00, 0x95, 0x2f, 0x4e, 0xda, 0x27, 0xed, 0x3d, 0xdb, 0x20, 0x36,
	0x2c, 0x75, 0x7a, 0x9d, 0x7e, 0x67, 0xb7, 0xdb, 0xf9, 0xba, 0xd3, 0xdb, 0xb7, 0x0b, 0x48, 0xa5,
	0x27, 0xbd, 0x1e, 0x0a, 0x45, 0xa4, 0x1e, 0xed, 0x9e, 0x1c, 0xb7, 0xf7, 0xec, 0x12, 0x59, 0x02,
	0xb3, 0x75, 0x78, 0x70, 0xd4, 0x6d, 0xf7, 0xdb, 0x76, 0x99, 0x58, 0x50, 0x6e, 0x53, 0x7a, 0x48,
	0xed, 0x0a, 0xda, 0x38, 0x7e, 0x74, 0xdc, 0x6f, 0x1f, 0x0c, 0x12, 0xa4, 0xaa, 0xa8, 0xbb, 0xbd,
	0x56, 0xbb, 0xdb, 0xde, 0xb3, 0xcd, 0x8d, 0xfb, 0x60, 0xa6, 0x85, 0x47, 0xeb, 0x07, 0x9d, 0x5e,
	0xe7, 0x60, 0xb7, 0x6b, 0x5f, 0x41, 0x1b, 0x0f, 0x76, 0x8f, 0x3b, 0x2d, 0xdb, 0x50, 0x31, 0x9c,
	0x74, 0xbb, 0x76, 0x61, 0xfb, 0x65, 0x09, 0x6a, 0x48, 0xd7, 0xd9, 0x22, 0xdf, 0xa8, 0xc1, 0xc8,
	0xe7, 0xee, 0x7a, 0xf2, 0xab, 0xb7, 0x90, 0xe3, 0x86, 0x7d, 0x59, 0xe1, 0xbe, 0xf5, 0xd3, 0x5f,
	0xff, 0xfc, 0x5a, 0x70, 0xc8, 0xda, 0xd6, 0xf9, 0xfb, 0x5b, 0xaa, 0x7d, 0xb6, 0x44, 0xa2, 0x7e,
	0x2f, 0x40, 0x53, 0x0f, 0x01, 0x66, 0xb3, 0x49, 0x66, 0xbd, 0xd6, 0x48, 0xee, 0x58, 0x9c, 0x5b,
	0x77, 0x45, 0x59, 0x5c, 0x76, 0xad, 0xcc, 0xe2, 0x8e, 0xb1, 0x41, 0x0e, 0xc0, 0xca, 0x3a, 0x99,
	0xac, 0xaa, 0xb3, 0x97, 0xe7, 0xb0, 0xb1, 0x76, 0x19, 0xd6, 0x16, 0xaf, 0x2a, 0x8b, 0x35, 0x32,
	0xb3, 0x48, 0x76, 0xa1, 0xaa, 0x97, 0x01, 0x49, 0xfe, 0xcb, 0xe6, 0x57, 0x43, 0x63, 0xe6, 0xa8,
	0xbb, 0xa6, 0x4e, 0xdb, 0x64, 0x79, 0x16, 0xe1, 0x0f, 0x81, 0xff, 0x23, 0x79, 0x0c, 0x30, 0x6b,
	0x6c, 0x92, 0xdc, 0xbd, 0x30, 0x0e, 0x69, 0x98, 0x8b, 0x13, 0x70, 0x4b, 0x99, 0xbd, 0xee, 0xae,
	0xce, 0x9b, 0xdd, 0x19, 0x2a, 0x2a, 0xf9, 0x16, 0x6a, 0xb9, 0xd6, 0xd7, 0x15, 0x59, 0x1c, 0x99,
	0x86, 0xb3, 0xa8, 0xd0, 0x17, 0xe8, 0xca, 0xb8, 0x6b, 0x97, 0x2e, 0x88, 0x13, 0xee, 0x69, 0x45,
	0xfd, 0xfe, 0x7f, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x04, 0x91, 0x32, 0x2e, 0x0c,
	0x00, 0x00,
}
