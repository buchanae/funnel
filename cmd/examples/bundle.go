// Code generated by go-bindata.
// sources:
// examples/4-cpu-md5.json
// examples/4-cpu-sleep.json
// examples/config.yml
// examples/google-storage.json
// examples/hello-world.json
// examples/md5.json
// examples/submit-date-loop.json
// examples/submit-echo-a-loop.json
// examples/submit-ports.json
// DO NOT EDIT!

package examples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examples4CpuMd5Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\x4d\x4b\xc3\x40\x10\xbd\xe7\x57\x0c\x7b\x2e\xe4\xd2\x5c\x72\xb5\x06\x04\x0b\x1e\xf4\x24\x25\xa4\xbb\xa3\xae\x64\x3f\xd8\x9d\x01\x4b\xc9\x7f\x97\x8d\x49\xa4\x1b\xab\x17\x73\x9a\xcc\x7b\xf3\xe6\xbd\xd9\x73\x01\x00\x20\x6c\x67\x50\xd4\x20\x1e\x31\x12\x6c\xe1\xe6\xe1\x09\x8c\xaa\xc4\xe6\x0b\xf5\xc1\xbd\xa3\xa4\x44\x68\xd8\x5a\xec\x67\x40\x61\x94\x41\x7b\xd2\xce\x26\x70\x7f\x82\x1d\x46\x39\xa3\xda\x7a\xa6\x28\x6a\x78\x1e\xff\xd3\x77\x5e\xaa\x8b\xb5\xda\xbe\xe8\x1e\xa7\xb9\x05\xcd\xd4\x1b\xdd\x23\x90\x83\x23\xc2\x7e\x57\xa1\xca\xe9\x1c\xfa\x44\x4b\x4a\x75\x59\x96\x64\x7c\x49\x18\xa9\xfd\x49\x9a\x4e\x7e\x5c\xdc\xdc\xdd\xdf\xe6\x98\xef\xe8\x2d\x61\x99\xc2\x42\x1a\xc6\xea\x30\x85\x74\x4c\x7f\xa5\xbc\x66\xcc\xf1\x7f\x98\x73\x4c\xd7\xbc\x05\x8c\x8e\x83\xc4\xe4\xee\xdb\x93\x90\x9e\x5b\xe9\xc2\xd8\xde\x8e\xed\x61\x1a\xc0\x0f\x94\x4c\x2e\xfc\x1a\x47\x9b\xee\x15\xdb\xf9\xe9\xf8\xc8\x96\x38\xb7\x29\x8d\x4a\x12\xc2\xa8\x2a\xb2\x11\x9b\xd5\x35\x0f\xd9\x40\x24\x95\x82\xac\x92\xad\x69\x18\xc2\x25\x2d\x35\xf2\x03\x14\x43\xf1\x19\x00\x00\xff\xff\x8c\x2f\x67\xdf\xda\x02\x00\x00")

func examples4CpuMd5JsonBytes() ([]byte, error) {
	return bindataRead(
		_examples4CpuMd5Json,
		"examples/4-cpu-md5.json",
	)
}

func examples4CpuMd5Json() (*asset, error) {
	bytes, err := examples4CpuMd5JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/4-cpu-md5.json", size: 730, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examples4CpuSleepJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4f\x6b\x84\x40\x0c\xc5\xef\x7e\x8a\x90\x73\xc1\x42\x3d\x79\x6d\xe9\xad\xd0\x4b\x4f\x45\xc4\x8e\xa1\x58\x9c\x3f\x64\x12\xe8\xb2\xf8\xdd\x97\x19\x47\x65\xdd\x5b\xf8\xbd\xf7\x92\xbc\x6b\x05\x00\x80\x6e\xb0\x84\x2d\x60\x03\xaf\x9f\x5f\x10\x67\xa2\x80\x4f\xab\x14\xd8\xff\x91\x91\xa4\xbe\xab\x73\x34\x6f\xc2\x48\xd1\xf0\x14\x64\xf2\x2e\x89\x1f\x17\x78\xa3\x68\x36\x75\x72\x41\x25\x62\x0b\xdf\x5d\x21\x5e\xe5\x8c\x98\xa2\x57\x36\x94\xe0\xfa\x49\xc6\x26\x68\x6f\x3c\x67\xdc\x64\xbc\x94\x00\xfd\x93\x51\xf1\x9c\xb7\xec\x81\x23\xba\x9e\xb6\xc3\x2f\xf5\x5b\x25\xfd\x51\x27\x5a\xde\x3a\x4e\xd8\x31\xad\xc0\x52\x15\xf0\xe5\x19\xbb\x93\x27\xca\xe8\x35\x17\xaf\xc5\x86\x5a\x28\x4a\x9f\xc0\xa3\x8d\x98\xef\x6d\x09\xec\xae\x25\x4f\x5d\xb5\x54\xb7\x00\x00\x00\xff\xff\x05\x74\x4e\xa1\x6e\x01\x00\x00")

func examples4CpuSleepJsonBytes() ([]byte, error) {
	return bindataRead(
		_examples4CpuSleepJson,
		"examples/4-cpu-sleep.json",
	)
}

func examples4CpuSleepJson() (*asset, error) {
	bytes, err := examples4CpuSleepJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/4-cpu-sleep.json", size: 366, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesConfigYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\x1b\x39\x0e\x7e\x9f\x5f\x41\xd4\x0f\xbb\x05\xec\xa9\x83\xc5\x1e\x6e\xfd\x96\xda\x6d\x36\xd8\xf4\xea\x8b\xbd\x08\x70\x6f\xb2\x44\xcf\xe8\xa2\x91\x7c\x12\x65\x77\xfa\xeb\x0f\x94\x66\xc6\x76\xe3\xa4\x5d\x64\xfb\x14\x8f\xa8\x8f\x94\x48\x7e\x1f\xd5\x11\x2c\x05\xd5\x40\x0e\xa8\x46\x50\x82\xc4\x46\x04\x84\xad\x36\x58\x16\x8b\xf7\xbc\x38\x83\xf2\xdd\x36\x5a\x8b\x66\x72\x70\xfe\x71\xa2\xb4\xef\x7e\x97\x6a\x53\x8c\x60\xe9\x3c\x41\x0c\xa8\x60\xeb\x3c\xfc\xbe\x5e\x2f\x41\xba\xa6\x89\x56\x4b\x41\xda\x59\x10\x56\x25\xf4\x03\x6e\x40\x89\x50\x6f\x9c\xf0\xaa\x2c\xd8\x92\xf7\xce\xe0\x9f\xd3\xe9\xf4\x09\xd0\xfd\x72\x7e\x8e\x53\x16\xf7\xcb\x79\xde\xf0\xdb\xf4\x37\xde\xf0\xe0\xfc\xa3\xb6\x55\x8a\x36\x80\xf4\x28\x08\x15\xa8\xe8\xf9\xe3\xce\x3b\x89\x21\xf0\x9f\x07\x6d\x0c\x6c\x10\x0e\x5e\x13\xa1\x05\x6d\x81\x6a\x1d\x40\x69\x8f\x92\x9c\x6f\xcb\x82\xa1\x16\xda\x5f\x38\x6b\x31\x82\xdf\x5d\x20\x2b\x1a\x04\xb7\x4d\x07\xf9\x98\x2c\x20\xa0\xdf\xa3\x2f\xe1\x93\xd0\xd6\xb4\xe3\x8c\xa9\x43\x3e\xc2\xa6\x05\x11\xc9\x4d\x82\x14\x06\x7d\x28\x46\x7c\xc7\xd2\xd9\xad\xae\xa2\x47\x60\x74\xf4\xa1\x2c\x18\xfb\x5f\xa2\xc1\x19\x18\x27\x85\xa9\x5d\xa0\x62\x04\x77\xae\xaa\x38\x72\x83\x7b\x34\x61\x06\x0a\x37\xb1\x1a\x83\xb6\x5b\x37\x06\xf4\xde\xf9\xe2\xce\x55\x77\xbc\xda\x2d\xf2\x75\x78\x4d\x08\xc6\x55\x21\xe7\x53\x07\xd8\x09\xaa\x4b\xb8\xdd\x02\x36\x3b\x6a\xc7\x79\x51\xf8\xe3\x55\x90\x83\x40\x0a\xbd\x2f\x19\x30\xa7\xfb\xcd\x1b\x8e\x40\x37\x9a\xd2\x69\x83\xfe\x9a\x4f\x2e\xc2\x23\xe0\x17\x94\x91\x9c\xcf\x48\x3f\x07\x52\x2e\xd2\x3b\xf4\xfe\x2d\x47\x07\x9b\x96\x30\x94\xc5\x27\xf1\xe5\x43\x67\x78\xe7\xaa\x95\xfe\x8a\x33\xb8\x9a\x4e\xa7\x53\x18\xc1\xd5\x14\xfe\x78\x9f\x2e\xf5\x00\x6e\xdb\xc5\xe0\xa3\x05\x01\x41\xd6\xa8\xa2\x41\x0f\x9a\xd0\x77\x49\x1f\xc1\xad\x05\x2b\xac\x0b\x28\x9d\x55\xa1\x2c\x56\x9d\xd9\xbd\xa0\x1e\x77\xda\x83\x43\xb6\xea\xf0\x1b\x61\xdb\x14\x77\xba\x91\x1e\x9e\x03\x75\x16\x4f\x9d\xf4\x90\xf3\x3a\xda\x47\xc6\xec\x00\x8c\xb3\x15\x6f\x3d\x08\x4d\xb0\x41\x3a\x20\x5a\x88\x3b\x25\x08\x03\x6c\x70\xeb\x3c\x42\x23\x72\x15\x8a\x2e\xa9\xa0\x50\xa8\x4b\x71\x3f\xa4\xe5\xa5\xb6\xd5\x5a\x37\xe8\x22\xcd\xe0\x1f\xd3\xf3\xe8\x1b\x6d\x23\xe1\x25\xe7\xdc\x12\x83\x87\x94\x35\xe1\x69\xfc\x6d\x0c\xa9\xcd\x7e\x24\x8a\x5b\xab\x69\x88\xe2\x97\xe9\x59\x18\xbf\x76\x61\x84\xb4\x5b\x9a\xa8\x10\x04\xbc\x99\x0b\x59\xe3\x64\xee\x2c\x79\x67\x66\x60\xdd\x24\x90\xf3\xf8\x26\xb7\x7c\x8d\x42\x71\xe2\x2c\xdc\x20\xbd\xbb\xd3\x81\xc0\x63\xd8\x39\x1b\xb0\x2b\xfe\x9d\xc7\x3d\x5a\x02\x29\x64\xcd\xb1\x6e\x5a\xd0\x96\xd0\x37\xa8\xb4\xf0\x6d\x6a\x27\x2d\xb9\x7c\x16\x3a\x88\x8d\x41\xc6\x4d\x4e\x67\x40\x3e\x62\x51\x8c\xe0\xa3\x36\x08\xec\x56\x54\x08\xa1\x0d\x84\x4d\xe0\x43\xae\xbb\xd6\x13\x60\xd8\xb3\xdb\x42\x20\x1f\x25\x05\xf8\x79\xfd\x79\xf1\x19\xa8\x16\xf4\x53\x48\xfd\x17\x99\x12\xc6\x1c\x5c\xb2\xe0\x66\x4c\xad\x92\x7b\xf3\x6d\xb1\xca\xe8\xb3\x02\x80\xfb\x50\x0a\x93\xf8\xa5\xf3\x56\x16\x00\x93\xfc\x99\x2d\xf8\xdf\x08\x1e\x6a\x4d\xd8\x3b\x4e\x6d\x7c\xa4\x96\xd4\x82\x01\x0e\xb5\x96\x75\x4f\x1c\x1c\xa8\x31\xee\x80\x8a\xef\x45\x48\xe6\xa9\xb2\x43\xbb\xce\x0b\x0b\xed\x43\xef\x80\x3d\x3e\xa5\xe0\xee\x16\x92\xcd\x68\xf5\x4b\x36\x1e\x01\x7c\xb0\x6a\xe7\xb4\xa5\xe1\xc3\x1f\xd8\x0e\x7f\xaf\x50\x7a\xa4\x59\x51\x74\x91\xdf\x38\x57\x19\x84\xb9\x71\x51\xc1\xea\x04\x11\x46\x37\xab\xe3\x01\x7b\x8d\x10\x52\xba\xc8\x29\xf4\xa8\xd0\x92\x16\x26\x74\x52\xd1\x5b\x7e\xde\x71\x43\x09\x93\x48\x67\xe7\x42\xd0\x1b\x83\xe3\xb3\x0d\x3d\x1b\x33\x3d\x36\x82\xb4\x14\xc6\xb4\xa0\x74\x90\x6e\x8f\x1e\xd5\x80\xb5\xf5\xae\x49\x15\x8d\x76\xaf\xbd\xb3\x0d\x5a\x2a\xfb\xc8\xaf\x73\x28\x5c\x10\xc7\x38\xaf\x2f\x42\x9e\x87\xfb\x12\xe8\x47\xef\x9a\x0f\x76\x7f\xac\xb7\x75\x8d\x70\xca\xfc\x42\x92\xde\xe3\x09\x51\x6d\x84\x7c\xc4\xc4\x37\xd7\x7b\xa1\x0d\x97\x6d\xff\x2d\x74\x94\x3e\xe6\xd2\x52\xce\x8f\xa1\x92\x38\x06\xb7\x43\x1b\x48\xc8\xc7\x81\x74\x7c\x67\xc8\x0e\x57\xdf\x22\x77\x75\x59\xbc\xef\x41\x39\x77\x37\xf3\x0f\x7d\x4a\x7f\x2c\x35\xa3\xf3\x74\xa4\x82\xff\x5e\x1e\xf2\xce\xd3\x7b\x66\x65\xb8\x50\x37\x3b\xef\xfe\x8b\x92\xe0\x76\xf1\x5a\x67\xcb\x8c\xf4\x9c\xa3\xaf\xce\xbe\xfa\x3c\xff\x71\xf6\x78\x90\x07\xd4\x55\x4d\xe1\xa4\xd0\x3d\x6e\xd1\xf7\xea\x9c\x68\x23\x33\x2d\xc4\x1d\xfc\x2f\x6a\xf9\x68\xda\x63\xb1\x3f\x9c\x9a\xb1\xaa\x0a\xe3\x51\xa8\x16\x9c\x35\xda\x22\xd4\x62\xcf\x62\x13\x48\xd8\x0e\x26\xee\x80\x74\x33\xf4\x4b\x76\xf7\x6f\xc6\x5d\xe5\xe5\x19\x5c\x95\xd3\xee\x88\xa7\x1a\xc0\xa4\x89\x9c\x77\xb8\x5e\xde\x32\x79\x45\xc3\xe4\xd6\x24\x2e\xc5\xc4\x7a\x63\x20\x6c\x76\x86\xa5\x69\x0c\x48\xf2\x6d\x07\xd3\x49\x84\xc7\xad\xc7\xc0\xcc\x9b\xbd\x27\x66\x5d\xaf\xef\x9e\x15\xa1\x4e\x29\x32\x11\x1e\x47\x88\x41\x84\x6e\x17\xcf\x5c\x79\x85\x96\x85\x35\xdf\xf8\xed\xa2\xbb\xed\x51\x9a\xe8\x84\x52\x1e\x43\xb8\x38\x49\x15\xcc\x4f\xfc\xc7\x75\x36\x3a\x19\x89\x66\x69\xe2\x4b\x2d\xfa\xfa\x59\x0f\xe0\x85\x69\xaf\x3b\xec\x89\x90\xd6\x82\xa5\x9e\xa1\x94\xc1\xa4\xc3\x9c\x14\x56\xe1\x5a\xd8\x64\x48\x59\x48\xc7\xa0\x29\xfb\x0f\x75\x24\x50\xee\x60\xcb\x84\x37\xb9\x82\x06\x85\xe5\x42\x41\x8f\x4c\xff\xd6\xf5\x9b\x4a\x98\xf6\x8b\xf9\x03\xe8\x26\x29\x22\xa1\x69\x41\x6c\x29\x39\xe2\x89\xdc\x07\x4a\xb3\x0c\x63\x0e\xd2\x3d\xb9\x4a\x1e\x3e\x89\x2f\xba\x89\x4d\x9e\xd1\x8c\xab\xce\x26\xb3\x34\xc1\x9d\x8e\x67\xc0\xf3\xe5\x5a\x68\x73\x69\x32\x1b\x6e\xf9\xa9\xce\x02\x8c\xd2\xea\x7a\x18\x74\x63\x4a\x78\x40\xfa\xa6\x04\x36\x6d\x1e\x1d\x7b\x36\x1b\xc3\x26\x12\xb4\x2e\x42\xc3\x1d\x07\x16\x59\xfb\x6a\x1d\x12\x9e\xde\xf2\xd2\x4f\x1e\x73\x93\x9c\x0d\x53\x8d\xb0\xc9\x09\x7b\x3f\x91\xe6\x67\xc5\xf9\x89\x3c\xff\xdd\x02\xfd\x8c\x44\x7f\x5f\xa4\x4f\x64\xfa\x82\x50\x9f\x4b\xf5\x05\xb1\x7e\x59\xae\xcf\x04\xfb\xaf\x48\xf6\xdf\x2b\xda\xdf\x91\xed\x67\x84\xfb\xf5\xd2\xfd\x54\xbc\x73\x81\x7c\xf7\x15\x95\x5a\xe1\xec\x1d\x95\xea\xe5\x75\x2f\xa9\x04\x3a\xbc\xa5\xd2\x0d\xef\xd1\x7b\xcd\x73\xf4\x30\x25\x78\x0c\x2e\x7a\x99\xfb\xf1\xbe\xff\xd1\xd7\xf6\x7c\xf9\x67\x38\x1a\xf7\xa2\x37\xdf\xc5\x30\x83\x69\xd1\xfd\xbc\xbf\xfe\x74\xb4\x49\x0d\x7e\xf3\xbe\x37\xbd\x17\xcd\x0c\xa6\xe5\x60\xbb\xd0\xe1\x11\xc2\x4e\x48\x7c\x66\x0b\x1b\x24\x2e\x28\x3b\xa2\x4d\x44\x77\x98\xa4\xcb\x03\x8a\xb6\x53\x8e\xcc\xe3\x3d\x59\x31\x1d\xe6\xf7\xd0\xbb\xd0\x5a\x09\x9c\xbe\x6c\xf5\xed\xbb\x03\xe0\xcf\x64\x37\x50\xd7\xe5\x87\xdb\xcb\xae\xcf\x1e\x8d\xc9\xe1\x41\x73\x9d\x3f\x79\x94\xbf\x18\x42\x7e\x38\xfe\x7a\xfe\xe6\xe9\xac\xfe\x52\x00\x3c\x9f\x0d\x94\xdb\x3f\x0b\xbb\xff\x4b\xf9\xa1\x78\xee\x5c\xf5\x03\x21\xfd\x3f\x00\x00\xff\xff\xdb\xac\xbe\x31\xa5\x11\x00\x00")

func examplesConfigYmlBytes() ([]byte, error) {
	return bindataRead(
		_examplesConfigYml,
		"examples/config.yml",
	)
}

func examplesConfigYml() (*asset, error) {
	bytes, err := examplesConfigYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/config.yml", size: 4517, mode: os.FileMode(420), modTime: time.Unix(1494611479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesGoogleStorageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4b\x3b\x31\x10\xc5\xef\xfd\x2b\x86\x9c\xbf\x4b\xbe\x2a\x45\xe9\xb5\x3f\xc4\x83\x08\x6d\x2f\x22\x52\xd2\xec\x74\x37\x92\x64\x42\x32\xb1\x4a\xe9\xff\x2e\x59\x77\x65\x15\x3d\x4d\x78\x9f\x97\xc7\x9b\x39\x4d\x00\x00\x84\x57\x0e\xc5\x0c\xc4\x16\x13\xc3\x2d\x51\x63\x11\x36\x4c\x51\x35\x28\xfe\x7d\x5a\x42\xa4\x17\xd4\x5c\x5c\xab\xec\x3d\xda\x01\xd4\x98\x74\x34\x81\x0d\xf9\x02\x37\xc6\x05\x8b\xb0\xd4\x2d\xc1\x9c\x9c\x53\xbe\x1e\x9c\x11\x13\xe5\xa8\x31\x89\x19\x9c\xce\xbd\x88\x6f\xa8\x33\x53\x2c\xe2\x53\x27\x01\x9c\xfa\x09\x20\x8c\x53\x0d\xee\x86\x7e\x79\x9f\x3d\xe7\x3e\xaf\xe3\xda\xd5\xe5\xa3\x40\xdd\xd2\x48\xff\xe2\x2d\x5a\xfb\x2b\x38\x52\xb4\xb5\x78\x1e\x45\x25\xae\x29\x77\x0b\xf6\xaf\x1e\x9d\xbb\xd9\x3b\x85\xf1\x21\xf3\x1f\x65\x87\x9a\xc6\x1f\x8c\xc5\x71\xcd\x1f\x47\x5a\x19\x8b\xc0\x04\x7b\x84\xfb\xc5\x14\xeb\xb1\x35\x47\x5b\x2c\x4d\x9a\x49\x99\x9c\xae\xa2\x57\x15\xbe\x2a\x2b\xf5\xd1\x32\x91\xad\x18\x13\x57\x94\x39\x64\x96\x26\xd1\x81\xa2\x93\xd7\x17\xd3\xff\x37\x97\x57\x72\x1c\xc4\xef\xa1\x6b\xb3\xb8\x5b\x2f\xe7\xdb\x87\xf5\xe3\x18\x06\xc5\x6d\x81\x92\x5d\x90\x25\x71\xd7\x55\xfe\xbe\xf2\xe4\x3c\xf9\x08\x00\x00\xff\xff\x3e\x03\x8c\xce\x21\x02\x00\x00")

func examplesGoogleStorageJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesGoogleStorageJson,
		"examples/google-storage.json",
	)
}

func examplesGoogleStorageJson() (*asset, error) {
	bytes, err := examplesGoogleStorageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/google-storage.json", size: 545, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesHelloWorldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x8a\xc3\x30\x0c\x44\xef\xf9\x0a\xa1\x73\xbe\x20\xd7\x65\x97\xbd\xf7\x58\x42\x49\x6d\xd1\xb8\xd8\x56\xb0\x2d\x5a\x08\xf9\xf7\x22\x27\xf1\xa1\x3a\x0d\xf3\x86\x41\xb3\x76\x00\x00\x18\xa7\x40\x38\x00\xfe\x93\xf7\x0c\x2f\x4e\xde\x62\xbf\xa3\x25\xf1\x93\x4c\x51\xfa\x27\x31\x92\x3f\x81\xa5\x6c\x92\x5b\x8a\xe3\xa8\xf0\xe2\xc2\xe2\x09\x7e\xcd\xcc\xf0\xc3\x21\x4c\xb1\x55\x24\xca\x2c\xc9\x50\xc6\x01\xd6\xed\x30\xe9\x4d\x46\x0a\x27\x35\xaf\xd5\xd2\x5b\x9b\xaa\x21\x17\xa6\x07\xdd\xce\xef\xe4\x2e\xb1\xc8\xd1\xda\x32\x26\x58\xad\x40\x32\x33\x63\x0f\x38\xeb\x06\x15\xfb\x8c\xf1\x2b\x9e\x8b\x65\xa9\x73\x0e\xd5\xf0\x56\xd5\xd8\x6d\xdd\x27\x00\x00\xff\xff\xfb\x44\x4a\xde\x16\x01\x00\x00")

func examplesHelloWorldJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesHelloWorldJson,
		"examples/hello-world.json",
	)
}

func examplesHelloWorldJson() (*asset, error) {
	bytes, err := examplesHelloWorldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/hello-world.json", size: 278, mode: os.FileMode(420), modTime: time.Unix(1493403290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesMd5Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x3f\x6b\xc3\x40\x0c\xc5\x77\x7f\x0a\x71\x73\xc0\x53\x16\xcf\xa9\xa1\xd0\x6c\xdd\x4a\x08\xce\x9d\xda\x5e\xf1\xfd\xe1\x4e\x82\x06\xe3\xef\x5e\xe4\xda\x86\x9c\x9b\x76\xa9\x27\x59\xef\xe9\xe9\x27\x7b\xa8\x00\x00\x94\xef\x1c\xaa\x06\xd4\x33\x66\x82\xe3\x61\xaf\x76\xdf\xfd\x98\xc2\x07\x6a\x12\xa9\x65\xef\xb1\x5f\x04\x83\x59\x27\x1b\xc9\x06\x2f\xe2\xf1\x0a\x07\xcc\x7a\x51\xad\x8f\x4c\x59\x35\xf0\x32\xbd\xcb\x33\xac\xd5\xcd\x42\xeb\x5f\x6d\x8f\xf3\xdc\xaa\x16\xe9\xad\xed\x11\x28\xc0\x05\x85\x0d\x4d\x69\xe7\xd4\x8b\x4d\x92\x9a\xba\xae\xc9\xc5\x9a\x30\xd3\xf9\xa7\x68\xba\xc6\x69\x71\xfb\xf8\xf4\x50\x6a\xb1\xa3\x77\xd1\x8a\x84\xd5\x34\x4e\xd5\x69\x3e\x32\x30\xfd\x75\xe5\x3d\xb0\xc0\xff\x01\x17\x98\xee\xb1\x25\xcc\x81\x93\x46\xa1\x1b\xc6\xb9\x89\x9f\xa8\x99\x42\xfa\x15\xd9\xba\xee\x0d\xcf\xcb\xef\xe1\x0b\x7b\xe2\x12\x45\x3b\x23\x11\xca\x99\x7d\x66\xa7\x76\x9b\x2f\x76\x2a\x06\x32\x19\x81\xdd\xd0\x6f\x6d\x98\xd2\xad\x4d\x1a\xe5\x91\xd5\x58\x7d\x05\x00\x00\xff\xff\x4f\xec\x2d\x40\xb8\x02\x00\x00")

func examplesMd5JsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesMd5Json,
		"examples/md5.json",
	)
}

func examplesMd5Json() (*asset, error) {
	bytes, err := examplesMd5JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/md5.json", size: 696, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitDateLoopJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xf3\x30\x0c\x84\xf7\x3c\x05\xa1\x39\xfe\x83\x7f\x4d\xd6\xa2\x73\xf7\xc2\x30\x1c\xe9\x5a\xbb\xb0\x45\x81\xa2\xd2\x16\x86\xdf\xbd\xa0\x63\x7b\x48\xab\x41\x20\xbe\x3b\x1e\x41\x4e\x07\x22\x22\x17\xdb\x11\xee\x4c\xee\xa9\x55\xd0\xc0\x9c\xdc\xf1\x2e\x24\xe1\x0f\x78\x35\xed\xb9\xc4\x88\x61\x13\x02\xb2\x97\x3e\x69\xcf\xd1\xc4\x17\xe9\xa3\x92\x76\xa0\x60\x11\xb8\x41\xbe\x29\xc3\x73\x0c\x47\x7a\x63\xa9\x70\xab\x58\xfe\x6d\xdd\x7d\x4c\x45\xb3\x3b\xd3\x6b\xbd\x12\x2e\xfa\x88\x04\x99\x8b\x78\x18\x9c\xe6\x15\xe2\x0b\xbe\x28\xcb\xe2\x5c\x90\xbd\x69\xaf\xee\xf1\x63\xfb\x8e\x66\x5b\xaa\x5c\x4b\xd4\xb2\x8e\xde\x3d\x7e\x0c\x16\xe1\xae\x6d\xee\xdc\x91\x5c\xe5\xed\xff\xec\xfa\x01\xa4\x52\x70\xa1\xc0\xcb\x32\x17\xca\x03\x90\xe8\xbf\x91\x08\x57\x3f\x04\x65\x0d\x5c\x96\x0b\x9d\x74\x4c\x27\x6b\x69\xec\x84\x8d\xd1\xdf\x5e\x88\xfc\xe1\x35\xba\x5b\xe7\xa5\xaa\x0f\xf3\xe1\x27\x00\x00\xff\xff\xa8\x21\x50\x14\x9f\x01\x00\x00")

func examplesSubmitDateLoopJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitDateLoopJson,
		"examples/submit-date-loop.json",
	)
}

func examplesSubmitDateLoopJson() (*asset, error) {
	bytes, err := examplesSubmitDateLoopJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-date-loop.json", size: 415, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitEchoALoopJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x8a\x93\xe7\x96\xc2\xda\xce\x30\xb3\xa3\x28\x4a\xed\x07\x09\x4a\x7c\xd6\xf9\x5c\x40\x51\xfe\x3b\xba\x34\xc9\x50\xf0\x60\x9d\xbe\xf7\xfc\xac\x7b\xe3\x8e\x88\xc8\xc5\x66\x80\x3b\x91\x7b\xf6\x2d\x53\x43\x3d\x73\x72\xfb\x9b\x94\x84\x3f\xe1\xd5\xd4\x97\x12\x23\xfa\x55\x08\xc8\x5e\xba\xa4\x1d\x47\x13\x5f\xa5\x8b\x4a\xda\x82\x42\xa3\x20\x5c\x21\x3f\x94\xe1\x39\x86\x3d\xbd\xb3\x1c\x70\x3d\xb0\x3c\xac\xaf\xbb\x98\x8a\x66\x77\xa2\xb7\x6a\x21\x5c\xf4\x1e\x09\x32\x17\xf1\x30\x38\x4e\x0b\xc4\x37\x7c\x51\x96\xd9\x39\x23\x3b\xe3\x36\xdd\xe2\x87\xe6\x03\xf5\xba\x56\xb9\x94\xa8\x65\xf9\x7a\xf3\xf8\x21\x58\x84\xbb\x34\xb9\x75\x7b\x72\x07\x6f\xf7\x57\xdb\xf5\x20\x95\x82\x33\x05\x26\xcc\x8d\x9c\x29\xf7\x40\xa2\xa7\x47\x83\x11\xae\xba\xcb\xca\x1a\xb8\xcc\x25\x1d\x75\x48\x47\xab\xa0\xb6\x16\x6b\xa3\x7f\xbd\x10\xf9\xc7\x6b\x74\xb3\x4e\xf3\x54\xed\xa6\xdd\x6f\x00\x00\x00\xff\xff\xf4\x93\xed\xc4\xa4\x01\x00\x00")

func examplesSubmitEchoALoopJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitEchoALoopJson,
		"examples/submit-echo-a-loop.json",
	)
}

func examplesSubmitEchoALoopJson() (*asset, error) {
	bytes, err := examplesSubmitEchoALoopJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-echo-a-loop.json", size: 420, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitPortsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x31\x6b\xc5\x30\x0c\x84\xf7\xfc\x0a\xa1\x39\x43\xba\x85\xac\xa5\x9d\x0b\xed\xf6\x78\x94\xd4\x11\x7d\x2e\xb1\x64\x2c\x19\x0a\xc1\xff\xbd\xd8\x4d\x32\xc4\xd3\x71\xdf\x9d\x39\x6d\x1d\x00\x00\xf2\x1c\x08\x27\xc0\x0f\x52\x83\x37\x49\xa6\xd8\xff\x93\x98\xe4\x87\x9c\x55\xf8\x9a\x99\x69\x3d\xc0\x42\xea\x92\x8f\xe6\x85\x2b\x7c\xf7\x21\xae\x04\x2f\xee\x21\xf0\x2c\x21\xcc\xbc\x1c\xc9\x44\x2a\x39\x39\x52\x9c\x60\x2b\xbb\x49\xbf\xe4\xb2\x49\xaa\xe6\xad\x59\xf5\x6d\xa7\x6a\x21\x1f\xe6\x6f\xfa\x3c\xc6\xe5\xaf\xcc\x96\xf7\x5f\xcf\x4c\x6c\x6b\x27\xb8\x6d\xf8\x10\xad\x43\x87\x1e\xd0\x09\xdb\xec\x99\x12\x4e\x30\x8e\xe3\x58\xee\x97\x9a\x0b\x4b\x2d\xa1\xae\x44\x11\x7b\xc0\xa7\x61\xc0\x6b\x48\x6d\x91\xdc\x6e\xdf\xd5\x89\x4b\x53\xf7\xae\x74\x7f\x01\x00\x00\xff\xff\xfe\x23\xdb\x9c\x42\x01\x00\x00")

func examplesSubmitPortsJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitPortsJson,
		"examples/submit-ports.json",
	)
}

func examplesSubmitPortsJson() (*asset, error) {
	bytes, err := examplesSubmitPortsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-ports.json", size: 322, mode: os.FileMode(420), modTime: time.Unix(1493325188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/4-cpu-md5.json": examples4CpuMd5Json,
	"examples/4-cpu-sleep.json": examples4CpuSleepJson,
	"examples/config.yml": examplesConfigYml,
	"examples/google-storage.json": examplesGoogleStorageJson,
	"examples/hello-world.json": examplesHelloWorldJson,
	"examples/md5.json": examplesMd5Json,
	"examples/submit-date-loop.json": examplesSubmitDateLoopJson,
	"examples/submit-echo-a-loop.json": examplesSubmitEchoALoopJson,
	"examples/submit-ports.json": examplesSubmitPortsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"examples": &bintree{nil, map[string]*bintree{
		"4-cpu-md5.json": &bintree{examples4CpuMd5Json, map[string]*bintree{}},
		"4-cpu-sleep.json": &bintree{examples4CpuSleepJson, map[string]*bintree{}},
		"config.yml": &bintree{examplesConfigYml, map[string]*bintree{}},
		"google-storage.json": &bintree{examplesGoogleStorageJson, map[string]*bintree{}},
		"hello-world.json": &bintree{examplesHelloWorldJson, map[string]*bintree{}},
		"md5.json": &bintree{examplesMd5Json, map[string]*bintree{}},
		"submit-date-loop.json": &bintree{examplesSubmitDateLoopJson, map[string]*bintree{}},
		"submit-echo-a-loop.json": &bintree{examplesSubmitEchoALoopJson, map[string]*bintree{}},
		"submit-ports.json": &bintree{examplesSubmitPortsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

